import obPlugin from "@aidenlx/esbuild-plugin-obsidian";
import { build } from "esbuild";
import { lessLoader } from "esbuild-plugin-less";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const isProd = process.env.BUILD === "production";

const cmModules = [
  "@codemirror/autocomplete",
  "@codemirror/closebrackets",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/comment",
  "@codemirror/fold",
  "@codemirror/gutter",
  "@codemirror/highlight",
  "@codemirror/history",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/matchbrackets",
  "@codemirror/panel",
  "@codemirror/rangeset",
  "@codemirror/rectangular-selection",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/stream-parser",
  "@codemirror/text",
  "@codemirror/tooltip",
  "@codemirror/view",
];

import { promises } from "fs";
import { join } from "path";
/**
 * @type {import("esbuild").Plugin}
 */
const remoteRedux = {
  name: "enable-remote-redux-devtools",
  setup: (build) => {
    if (isProd) return;
    build.onLoad({ filter: /src\/player\/store\.ts$/ }, async (args) => ({
      contents: (
        `import devToolsEnhancer from "remote-redux-devtools";` +
        (await promises.readFile(args.path, "utf8"))
      ).replace(
        `enhancers: []`,
        `enhancers: [devToolsEnhancer({ realtime: true, hostname: "localhost", port: 8000, name })]`,
      ),
      loader: "ts",
    }));
  },
};

/**
 * @type {import("esbuild").Plugin}
 */
const LessPathAlias = {
  name: "less-path-alias",
  setup: (build) => {
    build.onResolve(
      { filter: /^@styles.+\.less$/, namespace: "file" },
      async ({ path, namespace }) => {
        path = path.replace("@styles", "player/component/styles");
        return { path: join(process.cwd(), "src", path), namespace };
      },
    );
  },
};

try {
  const result = await build({
    entryPoints: ["src/mx-main.ts"],
    bundle: true,
    watch: !isProd,
    platform: "browser",
    external: [
      "obsidian",
      "https",
      "@electron/remote",
      "electron",
      ...cmModules,
    ],
    format: "cjs",
    mainFields: ["browser", "module", "main"],
    banner: { js: banner },
    sourcemap: isProd ? false : "inline",
    minify: isProd,
    define: {
      "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
    },
    outfile: "build/main.js",
    plugins: [LessPathAlias, lessLoader(), obPlugin(), remoteRedux],
    // metafile: true,
  });
  // await promises.writeFile(
  //   "meta.json",
  //   JSON.stringify(result.metafile),
  //   "utf8",
  // );
} catch (err) {
  console.error(err);
  process.exit(1);
}
